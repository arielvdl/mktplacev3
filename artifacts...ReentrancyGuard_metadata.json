{
	"compiler": {
		"version": "0.8.0+commit.c7dfd78e"
	},
	"language": "Solidity",
	"output": {
		"abi": [],
		"devdoc": {
			"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"mkt_gotas_packs_flattened.sol": "ReentrancyGuard"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"mkt_gotas_packs_flattened.sol": {
			"keccak256": "0xec684584a5de14f871cc998b441cf98d4c6951ac60a0c3217c26e4522c0acfec",
			"urls": [
				"bzz-raw://f12b0568873a0599d519062d7db7787cb9bb71fc7da8f1bbfcdeea71ffc43e8d",
				"dweb:/ipfs/QmWjvc1DETq6vEVzbtVHwbWsfe38xhQFYhg3jhQmSodeRd"
			]
		}
	},
	"version": 1
}